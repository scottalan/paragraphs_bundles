<?php
/**
 * @file
 * Paragraphs Bundles module file.
 */

define('PP_ADD_MORE_BUNDLE', 'add_more_bundle_');

include_once 'paragraphs_bundles.theme.inc';

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pre-process theme variables for various paragraph bundles.
 */
function paragraphs_bundles_preprocess_entity(&$vars) {
  if ($vars['entity_type'] == 'paragraphs_item') {
    $info = paragraphs_bundles_get_paragraph_field_info();
    if (!empty($info)) {
      $field_name = NULL;
      $value = NULL;
      $paragraph_wrapper = entity_metadata_wrapper('paragraphs_item', $vars['paragraphs_item']);
      $vars['paragraphs_bundles_content'] = '';

      foreach ($info as $field_name => $bundle) {
        foreach ($bundle as $bundle_name => $data) {
          if ($paragraph_wrapper->bundle->value() == $bundle_name) {
            if (isset($paragraph_wrapper->{$field_name})) {
              $value = $paragraph_wrapper->{$field_name}->value();
            }
            if (isset($data['render callback'])) {
              if (is_array($data['render callback'])) {
                foreach ($data['render callback'] as $function) {
                  if (function_exists($function)) {
                    // Call the function that will allow pre-processing for this layout selection.
                    $function($vars, $bundle_name, $field_name, $value);
                    // This allows other modules to alter the '$variables' array after we are done with it. If you want to
                    // completely override it then use drupal_alter: "hook_paragraphs_bundles_field_info_alter()" and
                    // replace the 'render callback'.
                    drupal_alter($function, $vars, $bundle_name, $field_name, $value);
                  }
                }
              }
              else {
                $function = $data['render callback'];
                if (function_exists($function)) {
                  // Call the function that will allow pre-processing for this layout selection.
                  $function($vars, $bundle_name, $field_name, $value);
                  // This allows other modules to alter the '$variables' array after we are done with it. If you want to
                  // completely override it then use drupal_alter: "hook_paragraphs_bundles_field_info_alter()" and
                  // replace the 'render callback'.
                  drupal_alter($function, $vars, $bundle_name, $field_name, $value);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function used to cache data.
 *
 * The data will be that returned by hook_paragraphs_bundles_field_info().
 *
 * @return array
 */
function paragraphs_bundles_get_paragraph_field_info() {
  $info = &drupal_static(__FUNCTION__);
  if (empty($info)) {
    $cache = cache_get(__FUNCTION__);
    if (!$cache) {
      // Get information from all modules about this field. The field name does
      // matter as there could be two fields on the same bundle that allow
      // different options.
      $info = module_invoke_all('paragraphs_bundles_field_info');
      drupal_alter('paragraphs_bundles_field_info', $info);
      return $info;
    }
    else {
      if (!empty($cache->data)) {
        return $cache->data;
      }
    }
  }
  return $info;
}

/**
 * Implements hook_paragraphs_field_widget_form_alter().
 *
 * This might need to be implemented in a custom module. For example, when
 * using this module inside a distribution like Atrium, this alter already
 * exists so we can just use it.
 *
 * Without following a default naming convention using a prefix:
 * e.g., `paragraphs_bundles`_my_bundle
 * There isn't a good way to tell what module the bundle belongs to.
 *
 * The theme hook that would need to be implemented would be something like:
 *   - oa_related_paragraphs_paragraphs_bundles_button_form
 *
 * All this function has to do is:
 * $element['#theme'] = 'paragraphs_bundles_paragraphs_' . $element['#bundle'] . '_form';
 */
function paragraphs_bundles_paragraphs_field_widget_form_alter(&$element, &$form_state, &$context) {}

/**
 * Helper function to define allowed values for paragraph fields
 *
 * This function is used in place of adding allowed values for those
 * fields in the UI.
 *
 * In the definition of hook_field_default_field_bases() we set a key => value
 * that allows us to define the options provided for a "List (text)" field.
 *
 * e.g.,.
 * 'allowed_values_function' => 'paragraphs_bundles_field_allowed_values',.
 *
 * @param array $field
 *   The field the values will be applied to.
 * @param array $instance
 *   The field instance.
 * @param string $entity_type
 *   The machine name of the paragraph entity.
 * @param object $entity
 *   The paragraphs item entity.
 * @param bool $cacheable
 *
 * @return array
 */
function paragraphs_bundles_field_allowed_values($field, $instance, $entity_type, $entity, $cacheable) {
  $cache = cache_get(__FUNCTION__ . ':' . $instance['field_name'] . ':' . $instance['bundle'], 'cache_field');
  if (!$cache) {
    $values = array();

    // Get information from all modules about this field. The field name DOES
    // matter, there can be two fields on the same bundle that allow different
    // options.
    $info = paragraphs_bundles_get_paragraph_field_info();

    foreach ($info as $field_name => $bundle) {
      if ($field_name == $instance['field_name']) {
        foreach ($bundle as $name => $data) {
          $values = $data['allowed values'];
          // Allow any module to alter these options.
          drupal_alter('paragraphs_bundles_' . $field_name . '_' . $name . '_values', $values);
        }
      }
    }
    // @todo: Re-enable this when done.
    //cache_set(__FUNCTION__ . ':' . $instance['field_name'] . ':' . $instance['bundle'], $values, 'cache_field');
    return $values;
  }
  else {
    if (!empty($cache->data)) {
      return $cache->data;
    }
  }
}
